ArrayFileHandler	src/array-file-handler.ts	/^export class ArrayFileHandler<T> {$/;"	c
Direction	src/util.ts	/^export type Direction = 1 | 0 | -1;$/;"	t
FileHandler	src/file-handler.ts	/^export class FileHandler<T> {$/;"	c
ICacheStats	src/diagnostics.ts	/^export interface ICacheStats {$/;"	i
ICatalog	src/composer.ts	/^export interface ICatalog {$/;"	i
ICatalogEntry	src/track.ts	/^export interface ICatalogEntry {$/;"	i
IComposer	src/composer.ts	/^export interface IComposer extends ITagable {$/;"	i
IComposerUpdater	src/composer.ts	/^export interface IComposerUpdater extends Partial<IComposer> {$/;"	i
IConfig	src/config.ts	/^export interface IConfig {$/;"	i
IKey	src/keypress.ts	/^export interface IKey {$/;"	i
IKeyAssignments	src/config.ts	/^export interface IKeyAssignments {$/;"	i
IKeyMaker	src/keypress.ts	/^export interface IKeyMaker {$/;"	i
IKeyMapping	src/keypress.ts	/^export interface IKeyMapping {$/;"	i
ILayout	src/layout.ts	/^export interface ILayout extends ITagable {$/;"	i
ILayoutColumn	src/layout.ts	/^export interface ILayoutColumn {$/;"	i
IOrder	src/order.ts	/^export interface IOrder {$/;"	i
IOrderSegment	src/order.ts	/^export interface IOrderSegment {$/;"	i
IPlayList	src/playlist.ts	/^export interface IPlayList extends ITagable {$/;"	i
IPlayer	src/play.ts	/^export interface IPlayer {$/;"	i
ISortable	src/util.ts	/^export interface ISortable extends ITagable {$/;"	i
ITableHandler	src/query.ts	/^export interface ITableHandler {$/;"	i
ITagable	src/query.ts	/^export interface ITagable {$/;"	i
ITheme	src/config.ts	/^export interface ITheme {$/;"	i
IThemeSettings	src/config.ts	/^export interface IThemeSettings {$/;"	i
ITiming	src/diagnostics.ts	/^export interface ITiming {$/;"	i
ITimingId	src/diagnostics.ts	/^export interface ITimingId {$/;"	i
ITrack	src/track.ts	/^export interface ITrack extends ITrackInfo, ITagable {$/;"	i
ITrackHydrated	src/track.ts	/^export interface ITrackHydrated extends ITrack {$/;"	i
ITrackInfo	src/track.ts	/^export interface ITrackInfo {$/;"	i
ITrackUpdater	src/track.ts	/^export interface ITrackUpdater extends Partial<ITrack> {$/;"	i
IValueToken	src/extractor.ts	/^export interface IValueToken extends IToken {$/;"	i
Justification	src/util.ts	/^export type Justification = 'left' | 'center' | 'right';$/;"	t
KeyHelp	src/keypress.ts	/^export type KeyHelp = string | (() => string);$/;"	t
Operation	src/extractor.ts	/^export enum Operation {$/;"	e
SegOut	src/segout.ts	/^export class SegOut {$/;"	c
ThemeElement	src/config.ts	/^export type ThemeElement = keyof ITheme;$/;"	t
Theming	src/config.ts	/^export type Theming = ThemeElement | IThemeSettings;$/;"	t
TokenType	src/extractor.ts	/^export enum TokenType {$/;"	e
add	src/composer.ts	/^export const add = (composer: IComposer): boolean => {$/;"	v
addKey	src/keypress.ts	/^export const addKey = (keyMapping: IKeyMapping) => {$/;"	v
addKeys	src/keypress.ts	/^export const addKeys = (keys: IKeyMapping[]) =>$/;"	v
addProgressSuffix	src/util.ts	/^export const addProgressSuffix = (suffix: string) => barSuffix += suffix;$/;"	v
applyThemeSetting	src/config.ts	/^export const applyThemeSetting = (text: string, element?: Theming) =>$/;"	v
applyThemeSettings	src/config.ts	/^export const applyThemeSettings = (text: string, themeSettings?: IThemeSettings) =>$/;"	v
ask	src/util.ts	/^export const ask = async (questions: any): Promise<any> => {$/;"	v
bumpPlays	src/track.ts	/^export const bumpPlays = (trackPath: string) => {$/;"	v
bumpRowsPrinted	src/util.ts	/^export const bumpRowsPrinted = (nLines: number = 1) => rowsPrinted += nLines;$/;"	v
cacheStats	src/stats.ts	/^export const cacheStats = () => {$/;"	v
clearLine	src/util.ts	/^export const clearLine = (dir: Direction = 0) => process.stdout.isTTY && process.stdout.clearLine(dir);$/;"	v
cmdAdd	src/track.ts	/^export const cmdAdd = async (tracks: string[], options: { noError: boolean; noWarn: boolean }) => {$/;"	v
cmdAddAll	src/track.ts	/^export const cmdAddAll = async (directory: string, options: { noError: boolean; noWarn: boolean }) =>$/;"	v
cmdInfo	src/track.ts	/^export const cmdInfo = async (track: string) => {$/;"	v
cmdPlay	src/play.ts	/^export const cmdPlay = async (track: ITrackHydrated | string): Promise<void> => { await doPlay(track); };$/;"	v
cmdPlayList	src/playlist.ts	/^export const cmdPlayList = async (name: string, options: IPlayListOptions) => {$/;"	v
cmdQuery	src/query.ts	/^export const cmdQuery = ($/;"	v
cmdRemoveDeleted	src/track.ts	/^export const cmdRemoveDeleted = async () => {$/;"	v
cmdResolveComposers	src/composer.ts	/^export const cmdResolveComposers = async () => {$/;"	v
cmdShowStats	src/stats.ts	/^export const cmdShowStats = ($/;"	v
cmdTag	src/query.ts	/^export const cmdTag = ($/;"	v
composerIndexCacheStats	src/composer.ts	/^export const composerIndexCacheStats: diagnostics.ICacheStats = {$/;"	v
cursorTo	src/util.ts	/^export const cursorTo = (x: number = 0, y?: number) => process.stdout.isTTY && process.stdout.cursorTo(x, y);$/;"	v
debug	src/util.ts	/^export const debug = (...args: any[]) => {$/;"	v
displayColumns	src/layout.ts	/^export const displayColumns = ($/;"	v
displayHeaders	src/layout.ts	/^export const displayHeaders = (layoutName?: string, output?: SegOut) => {$/;"	v
doPlay	src/play.ts	/^export const doPlay = async ($/;"	v
endTiming	src/diagnostics.ts	/^export const endTiming = (id: ITimingId | undefined): ITiming | undefined => {$/;"	v
eraseLine	src/util.ts	/^export const eraseLine = () => {$/;"	v
error	src/util.ts	/^export const error = (...args: any[]) => {$/;"	v
escapeRegExp	src/util.ts	/^export const escapeRegExp = (input: string) => input.replace(\/[.*+?^${}()|[\\]\\\\]\/g, '\\\\$&');$/;"	v
execWithProgress	src/asyncChild.ts	/^export const execWithProgress = async ($/;"	v
extract	src/extractor.ts	/^export const extract = (context: object, token: IToken): unknown => {$/;"	v
fetchAll	src/composer.ts	/^export const fetchAll = () => composerFile().fetch();$/;"	v
fetchAll	src/layout.ts	/^export const fetchAll = () => layoutFile().fetch();$/;"	v
fetchAll	src/order.ts	/^export const fetchAll = () => orderFile().fetch();$/;"	v
fetchAll	src/playlist.ts	/^export const fetchAll = () => playListFile().fetch();$/;"	v
fetchAll	src/track.ts	/^export const fetchAll = () => trackFile().fetch();$/;"	v
filter	src/composer.ts	/^export const filter = (where?: string): IComposer[] => {$/;"	v
filter	src/layout.ts	/^export const filter = (where?: string): ILayout[] => {$/;"	v
filter	src/playlist.ts	/^export const filter = (where?: string): IPlayList[] => {$/;"	v
filter	src/track.ts	/^export const filter = (where?: string): ITrackHydrated[] => {$/;"	v
find	src/composer.ts	/^export const find = (name: string, composers?: IComposer[]) => indexComposers(composers)[name];$/;"	v
find	src/layout.ts	/^export const find = (name: string, layouts?: ILayout[]) =>$/;"	v
find	src/order.ts	/^export const find = (name: string, orders?: IOrder[]) => _.find(orders ?? fetchAll(), (o) => o.name === name);$/;"	v
find	src/playlist.ts	/^export const find = (name: string, playlists?: IPlayList[]) => _.find(playlists ?? fetchAll(), (pl) => pl.name === name);$/;"	v
findTrack	src/track.ts	/^export const findTrack = (trackPath: string) => {$/;"	v
fixTTY	src/keypress.ts	/^export const fixTTY = () => {$/;"	v
formatColumns	src/layout.ts	/^export const formatColumns = ($/;"	v
getCacheStats	src/composer.ts	/^export const getCacheStats = () => composerFile().getCacheStats();$/;"	v
getCacheStats	src/config.ts	/^export const getCacheStats = () => configFile?.stats;$/;"	v
getCacheStats	src/layout.ts	/^export const getCacheStats = () => layoutFile().getCacheStats();$/;"	v
getCacheStats	src/playlist.ts	/^export const getCacheStats = () => playListFile().getCacheStats();$/;"	v
getCacheStats	src/track.ts	/^export const getCacheStats = () => trackFile().getCacheStats();$/;"	v
getCurrentTrack	src/playlist.ts	/^export const getCurrentTrack = (playlist: IPlayList, options: IPlayListOptions) => {$/;"	v
getInfo	src/track.ts	/^export const getInfo = async (track: string): Promise<ITrackInfo> => {$/;"	v
getKey	src/config.ts	/^export const getKey = (name: keyof IKeyAssignments) => getKeyAssignments()[name];$/;"	v
getKeyAssignments	src/config.ts	/^export const getKeyAssignments = (): IKeyAssignments =>$/;"	v
getLayout	src/layout.ts	/^export const getLayout = (layoutName?: string): ILayout | undefined => {$/;"	v
getPlayer	src/play.ts	/^export const getPlayer = (): IPlayer => {$/;"	v
getRowsPrinted	src/util.ts	/^export const getRowsPrinted = () => rowsPrinted;$/;"	v
getSettings	src/config.ts	/^export const getSettings = (): IConfig => {$/;"	v
getTableHandler	src/query.ts	/^export const getTableHandler = (table: string) => tableMap[table.toLowerCase()];$/;"	v
getTheme	src/config.ts	/^export const getTheme = () =>$/;"	v
getTimings	src/diagnostics.ts	/^export const getTimings = () => timings;$/;"	v
hydrateTrack	src/track.ts	/^export const hydrateTrack = ($/;"	v
inAsk	src/util.ts	/^export let inAsk: boolean = false;$/;"	v
indexComposers	src/composer.ts	/^export const indexComposers = (composers?: IComposer[]) => {$/;"	v
init	src/keypress.ts	/^export const init = (log: boolean = false) => {$/;"	v
isPlaying	src/play.ts	/^export const isPlaying = () => playState.isPlaying;$/;"	v
makeHelpText	src/keypress.ts	/^export const makeHelpText = (): string[] => {$/;"	v
makeKeys	src/keypress.ts	/^export const makeKeys = (makers: IKeyMaker[]): IKeyMapping[] =>$/;"	v
makeKeys	src/order.ts	/^export const makeKeys = (orderName: string): string[] => {$/;"	v
makeProgressBar	src/util.ts	/^export const makeProgressBar = (width: number, pct: number, text: string = '') => {$/;"	v
makeString	src/util.ts	/^export const makeString = (input: unknown): string =>$/;"	v
makeTime	src/util.ts	/^export const makeTime = (milli: number) => {$/;"	v
makeTrack	src/track.ts	/^export const makeTrack = async (trackPath: string, info?: ITrackInfo): Promise<ITrack> => {$/;"	v
maybeCorrectTrack	src/track.ts	/^export const maybeCorrectTrack = (t: ITrack) => {$/;"	v
maybeQuote	src/util.ts	/^export const maybeQuote = (input: string) => input.match(\/^[a-z0-9_]+$\/i)$/;"	v
merge	src/util.ts	/^export const merge = (a: any, b: any): any => _.keys(b).reduce((accum, k) => {$/;"	v
migrateAllTracks	src/track.ts	/^export const migrateAllTracks = () => {$/;"	v
migrateTrack	src/track.ts	/^export const migrateTrack = (t: ITrack, composerIndex: Record<string, IComposer>): ITrack => {$/;"	v
normalizePath	src/util.ts	/^export const normalizePath = (filename: string) => path.resolve(filename.normalize().replace(\/^\\~\/, os.homedir()));$/;"	v
notification	src/util.ts	/^export const notification = (...args: any) => {$/;"	v
padOrTruncate	src/util.ts	/^export const padOrTruncate = (text: string, width: number, justification?: Justification) =>$/;"	v
parse	src/extractor.ts	/^export const parse = (input: string): Response<IValueToken> => {$/;"	v
parseCacheStats	src/extractor.ts	/^export const parseCacheStats: ICacheStats = {$/;"	v
parseDuration	src/extractor.ts	/^import parseDuration from 'parse-duration';$/;"	I
parseExtractor	src/extractor.ts	/^export const parseExtractor = (input: string): IValueToken | undefined => {$/;"	v
parseMovement	src/track.ts	/^export const parseMovement = (title?: string): number|undefined => {$/;"	v
parseNo	src/track.ts	/^export const parseNo = (title?: string): number|undefined => {$/;"	v
parseOpus	src/track.ts	/^export const parseOpus = (title?: string): number|undefined => {$/;"	v
parseOrder	src/util.ts	/^export const parseOrder = (order: string): [ string, 'asc' | 'desc' | undefined ] => {$/;"	v
parseRoman	src/track.ts	/^export const parseRoman = (val: string) => [...val].reduce<{prev: number; result: number}>((accum, c) => {$/;"	v
parseSubMovement	src/track.ts	/^export const parseSubMovement = (title?: string): string|undefined => {$/;"	v
parseTags	src/extractor.ts	/^export const parseTags = (input: string) => {$/;"	v
play	src/players/afplay.ts	/^export const play = async (track: ITrackHydrated, earlyReturn: number = 0): Promise<boolean> => {$/;"	v
print	src/util.ts	/^export const print = (text: string, theme?: Theming) =>$/;"	v
printColumns	src/util.ts	/^export const printColumns = ($/;"	v
printLn	src/util.ts	/^export const printLn = (text: string, theme?: Theming) => {$/;"	v
quit	src/util.ts	/^export const quit = () => {$/;"	v
removeKey	src/keypress.ts	/^export const removeKey = (keyMapping: IKeyMapping) => {$/;"	v
removeKeys	src/keypress.ts	/^export const removeKeys = (keys: IKeyMapping[]) =>$/;"	v
removeProgressSuffix	src/util.ts	/^export const removeProgressSuffix = (suffix: string) => barSuffix = barSuffix.replace(suffix, '');$/;"	v
resolve	src/composer.ts	/^export const resolve = async (name: string, tracks: track.ITrack[]): Promise<boolean> => {$/;"	v
resolveAnonymous	src/track.ts	/^export const resolveAnonymous = async (track: ITrack): Promise<void> => {$/;"	v
resume	src/keypress.ts	/^export const resume = () => active = true;$/;"	v
save	src/layout.ts	/^export const save = (layout: ILayout) => {$/;"	v
save	src/order.ts	/^export const save = (order: IOrder) => {$/;"	v
save	src/playlist.ts	/^export const save = (playlist: IPlayList) => {$/;"	v
saveAll	src/track.ts	/^export const saveAll = (tracks: ITrack[]) => trackFile().save(tracks);$/;"	v
setCurrent	src/playlist.ts	/^export const setCurrent = (name: string, current: string) => {$/;"	v
showDiagnostics	src/stats.ts	/^export const showDiagnostics = () => {$/;"	v
showTimings	src/stats.ts	/^export const showTimings = () => {$/;"	v
sort	src/track.ts	/^export const sort = (sortKeys?: string[], whereClause?: string): ITrackHydrated[] => {$/;"	v
sortBy	src/util.ts	/^export const sortBy = <T extends ISortable>(items: T[], sortKeys: string[]): T[] => {$/;"	v
spawnWithProgress	src/asyncChild.ts	/^export const spawnWithProgress = async ($/;"	v
start	src/util.ts	/^export const start = () => {$/;"	v
startTiming	src/diagnostics.ts	/^export const startTiming = (name: string): ITimingId | undefined => {$/;"	v
stop	src/players/afplay.ts	/^export const stop = async () => {$/;"	v
stopPlaying	src/play.ts	/^export const stopPlaying = async () => playState.isPlaying ? await getPlayer().stop() : true;$/;"	v
suggest	src/composer.ts	/^export const suggest = (name: string) => _.sortBy(fetchAll().map((composer: IComposer) => ({$/;"	v
suspend	src/keypress.ts	/^export const suspend = () => active = false;$/;"	v
update	src/composer.ts	/^export const update = (updates: object[]) => updateComposers(updates as IComposerUpdater[]);$/;"	v
update	src/layout.ts	/^export const update = (updates: object[]): ILayout[] => updateLayouts(updates as ILayout[]);$/;"	v
update	src/playlist.ts	/^export const update = (updates: object[]): IPlayList[] => updatePlayLists(updates as IPlayList[]);$/;"	v
update	src/track.ts	/^export const update = (updates: object[]): ITrack[] => updateTracks(updates as ITrackUpdater[]);$/;"	v
updateComposer	src/composer.ts	/^export const updateComposer = (updates: IComposerUpdater): boolean => {$/;"	v
updateComposers	src/composer.ts	/^export const updateComposers = (updates: IComposerUpdater[]): IComposer[] => {$/;"	v
updateLayouts	src/layout.ts	/^export const updateLayouts = (updates: ILayout[]): ILayout[] => {$/;"	v
updatePlayLists	src/playlist.ts	/^export const updatePlayLists = (updates: IPlayList[]): IPlayList[] => {$/;"	v
updateTrack	src/track.ts	/^export const updateTrack = (updates: ITrackUpdater) => {$/;"	v
updateTracks	src/track.ts	/^export const updateTracks = (updates: ITrackUpdater[]): ITrack[] => {$/;"	v
warning	src/util.ts	/^export const warning = (...args: any) => {$/;"	v
